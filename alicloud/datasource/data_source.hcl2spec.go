// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package datasource

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	AccessId           *string `mapstructure:"AccessId" required:"true" cty:"AccessId" hcl:"AccessId"`
	AccessKey          *string `mapstructure:"AccessKey" required:"true" cty:"AccessKey" hcl:"AccessKey"`
	ImageId            *string `mapstructure:"imageId" required:"true" cty:"imageId" hcl:"imageId"`
	Region             *string `mapstructure:"region" required:"true" cty:"region" hcl:"region"`
	ImageFamily        *string `mapstructure:"imageFamily" required:"true" cty:"imageFamily" hcl:"imageFamily"`
	IsSupportCloudinit *string `mapstructure:"isSupportCloudinit" required:"true" cty:"isSupportCloudinit" hcl:"isSupportCloudinit"`
	OSType             *string `mapstructure:"osType" required:"true" cty:"osType" hcl:"osType"`
	Architecture       *string `mapstructure:"architecture" required:"true" cty:"architecture" hcl:"architecture"`
	Usage              *string `mapstructure:"usage" required:"true" cty:"usage" hcl:"usage"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"AccessId":           &hcldec.AttrSpec{Name: "AccessId", Type: cty.String, Required: false},
		"AccessKey":          &hcldec.AttrSpec{Name: "AccessKey", Type: cty.String, Required: false},
		"imageId":            &hcldec.AttrSpec{Name: "imageId", Type: cty.String, Required: false},
		"region":             &hcldec.AttrSpec{Name: "region", Type: cty.String, Required: false},
		"imageFamily":        &hcldec.AttrSpec{Name: "imageFamily", Type: cty.String, Required: false},
		"isSupportCloudinit": &hcldec.AttrSpec{Name: "isSupportCloudinit", Type: cty.String, Required: false},
		"osType":             &hcldec.AttrSpec{Name: "osType", Type: cty.String, Required: false},
		"architecture":       &hcldec.AttrSpec{Name: "architecture", Type: cty.String, Required: false},
		"usage":              &hcldec.AttrSpec{Name: "usage", Type: cty.String, Required: false},
	}
	return s
}

// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutput struct {
	Region       *string `mapstructure:"RegionId" cty:"RegionId" hcl:"RegionId"`
	ImageId      *string `mapstructure:"imageId" cty:"imageId" hcl:"imageId"`
	ImageFamily  *string `mapstructure:"imageFamily" cty:"imageFamily" hcl:"imageFamily"`
	OSType       *string `mapstructure:"osType" cty:"osType" hcl:"osType"`
	Architecture *string `mapstructure:"Architecture" cty:"Architecture" hcl:"Architecture"`
}

// FlatMapstructure returns a new FlatDatasourceOutput.
// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutput)
}

// HCL2Spec returns the hcl spec of a DatasourceOutput.
// This spec is used by HCL to read the fields of DatasourceOutput.
// The decoded values from this spec will then be applied to a FlatDatasourceOutput.
func (*FlatDatasourceOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"RegionId":     &hcldec.AttrSpec{Name: "RegionId", Type: cty.String, Required: false},
		"imageId":      &hcldec.AttrSpec{Name: "imageId", Type: cty.String, Required: false},
		"imageFamily":  &hcldec.AttrSpec{Name: "imageFamily", Type: cty.String, Required: false},
		"osType":       &hcldec.AttrSpec{Name: "osType", Type: cty.String, Required: false},
		"Architecture": &hcldec.AttrSpec{Name: "Architecture", Type: cty.String, Required: false},
	}
	return s
}
