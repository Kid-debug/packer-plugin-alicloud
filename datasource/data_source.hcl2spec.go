// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package datasource

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatConfig is an auto-generated flat version of Config.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatConfig struct {
	AccessKey    *string `mapstructure:"access_key" required:"true" cty:"access_key" hcl:"access_key"`
	SecretKey    *string `mapstructure:"secret_key" required:"true" cty:"secret_key" hcl:"secret_key"`
	Region       *string `mapstructure:"region_id" required:"true" cty:"region_id" hcl:"region_id"`
	ImageName    *string `mapstructure:"image_name" cty:"image_name" hcl:"image_name"`
	ImageFamily  *string `mapstructure:"image_family" cty:"image_family" hcl:"image_family"`
	OSType       *string `mapstructure:"os_type" cty:"os_type" hcl:"os_type"`
	Architecture *string `mapstructure:"architecture" cty:"architecture" hcl:"architecture"`
	Usage        *string `mapstructure:"usage" cty:"usage" hcl:"usage"`
}

// FlatMapstructure returns a new FlatConfig.
// FlatConfig is an auto-generated flat version of Config.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*Config) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatConfig)
}

// HCL2Spec returns the hcl spec of a Config.
// This spec is used by HCL to read the fields of Config.
// The decoded values from this spec will then be applied to a FlatConfig.
func (*FlatConfig) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"access_key":   &hcldec.AttrSpec{Name: "access_key", Type: cty.String, Required: false},
		"secret_key":   &hcldec.AttrSpec{Name: "secret_key", Type: cty.String, Required: false},
		"region_id":    &hcldec.AttrSpec{Name: "region_id", Type: cty.String, Required: false},
		"image_name":   &hcldec.AttrSpec{Name: "image_name", Type: cty.String, Required: false},
		"image_family": &hcldec.AttrSpec{Name: "image_family", Type: cty.String, Required: false},
		"os_type":      &hcldec.AttrSpec{Name: "os_type", Type: cty.String, Required: false},
		"architecture": &hcldec.AttrSpec{Name: "architecture", Type: cty.String, Required: false},
		"usage":        &hcldec.AttrSpec{Name: "usage", Type: cty.String, Required: false},
	}
	return s
}

// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatDatasourceOutput struct {
	Region       *string `mapstructure:"region_id" cty:"region_id" hcl:"region_id"`
	ImageName    *string `mapstructure:"image_name" cty:"image_name" hcl:"image_name"`
	ImageFamily  *string `mapstructure:"image_family" cty:"image_family" hcl:"image_family"`
	OSType       *string `mapstructure:"os_type" cty:"os_type" hcl:"os_type"`
	Architecture *string `mapstructure:"architecture" cty:"architecture" hcl:"architecture"`
}

// FlatMapstructure returns a new FlatDatasourceOutput.
// FlatDatasourceOutput is an auto-generated flat version of DatasourceOutput.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*DatasourceOutput) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatDatasourceOutput)
}

// HCL2Spec returns the hcl spec of a DatasourceOutput.
// This spec is used by HCL to read the fields of DatasourceOutput.
// The decoded values from this spec will then be applied to a FlatDatasourceOutput.
func (*FlatDatasourceOutput) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"region_id":    &hcldec.AttrSpec{Name: "region_id", Type: cty.String, Required: false},
		"image_name":   &hcldec.AttrSpec{Name: "image_name", Type: cty.String, Required: false},
		"image_family": &hcldec.AttrSpec{Name: "image_family", Type: cty.String, Required: false},
		"os_type":      &hcldec.AttrSpec{Name: "os_type", Type: cty.String, Required: false},
		"architecture": &hcldec.AttrSpec{Name: "architecture", Type: cty.String, Required: false},
	}
	return s
}
